name: Build and Deploy to Minikube

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: callme7liwa
  IMAGE_NAME: callme7liwa/app-spring

jobs:
  build-and-deploy:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: List files
      run: ls -R

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven
        
    - name: Build with Maven
      run: mvn -B package --file pom.xml
        
    - name: Build & push image 
      id: build_and_push_test
      uses: mr-smithers-excellent/docker-build-push@v5
      with:
        image: ${{ env.IMAGE_NAME }}
        tags: latest, ${{ github.sha }}
        registry: docker.io
        dockerfile: Dockerfile
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        name: Build and Deploy to Minikube
        
    - name: Start minikube
      uses: medyagh/setup-minikube@master
    - name: Try the cluster !
      run: kubectl get pods -A
    - name: Deploy to minikube
      run: |
            kubectl apply -f deployment.yml
            sleep 60s  
    - name: Try the cluster !
      run: kubectl get pods
    - name: Try the cluster !
      run: kubectl get services 
    - name: Get Minikube IP address
      id: get-minikube-ip
      run: minikube ip
      env:
        MINIKUBE_IP: ${{ steps.get-minikube-ip.outputs.MINIKUBE_IP }}  # Set environment variable

    - name: Get NodePort for "mon-app-java-service" (if applicable)
      id: get-node-port
      run: kubectl get svc mon-app-java-service -o jsonpath="{.spec.ports[0].nodePort}" || true  # Handle potential errors gracefully
      env:
        NODE_PORT: ${{ steps.get-node-port.outputs.NODE_PORT }}  # Set environment variable (or empty string if not found)

    - name: Access application (if NodePort available)
      run: curl http://${{ env.MINIKUBE_IP }}:${{ env.NODE_PORT }}
      # Only run if NODE_PORT is not empty
      # if: env.NODE_PORT

    
